{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\kesav\\\\Downloads\\\\TheShoeShop-main\\\\TheShoeShop-main\\\\frontend\\\\src\\\\components\\\\CheckOut\\\\Stripe.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useElements, useStripe, CardElement } from \"@stripe/react-stripe-js\";\nimport \"./Stripe.css\";\n\nconst Stripe = ({\n  state,\n  dispatch\n}) => {\n  _s();\n\n  const history = useHistory();\n  const sendToStrapiProducts = state.cart.map(el => {\n    const newArr = {\n      price_data: {\n        currency: \"eur\",\n        product_data: {\n          name: el.name,\n          images: el.image.map(element => {\n            return `${element.location}`;\n          })\n        },\n        unit_amount: el.price * 100\n      },\n      quantity: el.quantity\n    };\n    return newArr;\n  }); ///////////////////\n\n  const stripe = useStripe();\n  const elements = useElements();\n  const [succeeded, setSucceeded] = useState(false);\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState(\"\");\n  const [disabled, setDisabled] = useState(true);\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const [mongoWaiter, setmongoWaiter] = useState(null);\n  useEffect(() => {\n    window.fetch(\"https://lit-thicket-99427.herokuapp.com/api/payment/create-payment-intent\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        items: sendToStrapiProducts,\n        userinfo: state.user.adress,\n        cart: state.cart,\n        typeUser: state.user\n      })\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      // const waiter = { ...data.cartItems };\n      const waiter = { ...JSON.parse(data.metadata.cartProducts),\n        ...JSON.parse(data.metadata.typeUser)\n      };\n      setmongoWaiter({ ...waiter\n      }); //////////\n\n      setClientSecret(data.clientSecret);\n    });\n  }, [state.cart, state.user.adress, state.user]);\n\n  const orderstoMongo = param => {\n    let array = [];\n    param.cartItems.map(el => {\n      return array.push(el.mongoProductID);\n    }); // const user = param.typeUser.id;\n\n    const orders = {\n      cart: param.cartItems,\n      cartMongo: array,\n      adress: {\n        city: param.address.city,\n        street: param.address.line1,\n        postcode: param.address.postal_code\n      },\n      date: param.dateofsucc,\n      clientname: param.name,\n      email: param.receipt_email,\n      phone: param.phone,\n      orderMessage: param.orderStatus.message,\n      orderLocation: param.orderStatus.location,\n      trackingNumber: param.tracking_number,\n      amount: param.amount // metadata: param.metadata.cartProducts,\n\n    };\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      auth_token: `${localStorage.getItem(\"UserToken\")}`\n    };\n    fetch(\"https://lit-thicket-99427.herokuapp.com/api/payment/orderstomongo\", {\n      method: \"POST\",\n      headers: headers,\n      body: JSON.stringify({\n        orders\n      })\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      history.push({\n        pathname: \"/finishedpaid\",\n        state: {\n          detail: param\n        }\n      });\n    });\n  };\n\n  const handleSubmit = async ev => {\n    ev.preventDefault();\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    });\n\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      const objtoMongoOders = { ...mongoWaiter,\n        ...payload.paymentIntent.shipping,\n        dateofsucc: payload.paymentIntent.created,\n        receipt_email: payload.paymentIntent.receipt_email,\n        amount: payload.paymentIntent.amount,\n        orderStatus: {\n          message: \"Processing\",\n          location: \"Hakunila R-Kiosk\"\n        }\n      }; ///////////This goes to mongo If succes\n\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n      orderstoMongo(objtoMongoOders); // history.push({\n      //   pathname: \"/finishedpaid\",\n      //   state: { detail: objtoMongoOders },\n      // });\n    }\n  };\n\n  const handleChange = async event => {\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : \"\");\n  };\n\n  const cardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: \"Arial, sans-serif\",\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\"\n        }\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Payment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"payment-form\",\n      onSubmit: handleSubmit,\n      className: \"Stripeform\",\n      children: [/*#__PURE__*/_jsxDEV(CardElement, {\n        className: \"Stripeinput \",\n        id: \"card-element\",\n        options: cardStyle,\n        onChange: handleChange,\n        name: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: processing || disabled || succeeded,\n        id: \"submit\",\n        className: succeeded ? \"StripebuttonGreen\" : \"Stripebutton\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"button-text\",\n          children: processing ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spinner\",\n            id: \"spinner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 15\n          }, this) : `${succeeded ? \"Paid\" : \"Pay\"}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-error\",\n        role: \"alert\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 11\n      }, this), succeeded && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Succsesfully paid !\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: \"5px\",\n        textAlign: \"center\"\n      },\n      children: \"This is Stripe Payment service\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Stripe, \"KmpB/oSWWlr8UAwET0BH5yvxxn0=\", false, function () {\n  return [useHistory, useStripe, useElements];\n});\n\n_c = Stripe;\nexport default Stripe;\n\nvar _c;\n\n$RefreshReg$(_c, \"Stripe\");","map":{"version":3,"sources":["C:/Users/kesav/Downloads/TheShoeShop-main/TheShoeShop-main/frontend/src/components/CheckOut/Stripe.js"],"names":["React","useEffect","useState","useHistory","useElements","useStripe","CardElement","Stripe","state","dispatch","history","sendToStrapiProducts","cart","map","el","newArr","price_data","currency","product_data","name","images","image","element","location","unit_amount","price","quantity","stripe","elements","succeeded","setSucceeded","error","setError","processing","setProcessing","disabled","setDisabled","clientSecret","setClientSecret","mongoWaiter","setmongoWaiter","window","fetch","method","headers","body","JSON","stringify","items","userinfo","user","adress","typeUser","then","res","json","data","waiter","parse","metadata","cartProducts","orderstoMongo","param","array","cartItems","push","mongoProductID","orders","cartMongo","city","address","street","line1","postcode","postal_code","date","dateofsucc","clientname","email","receipt_email","phone","orderMessage","orderStatus","message","orderLocation","trackingNumber","tracking_number","amount","auth_token","localStorage","getItem","pathname","detail","handleSubmit","ev","preventDefault","payload","confirmCardPayment","payment_method","card","getElement","objtoMongoOders","paymentIntent","shipping","created","handleChange","event","empty","cardStyle","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","margin","textAlign"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport { useHistory } from \"react-router-dom\";\nimport { useElements, useStripe, CardElement } from \"@stripe/react-stripe-js\";\nimport \"./Stripe.css\";\n\nconst Stripe = ({ state, dispatch }) => {\n  const history = useHistory();\n  const sendToStrapiProducts = state.cart.map((el) => {\n    const newArr = {\n      price_data: {\n        currency: \"eur\",\n        product_data: {\n          name: el.name,\n          images: el.image.map((element) => {\n            return `${element.location}`;\n          }),\n        },\n        unit_amount: el.price * 100,\n      },\n      quantity: el.quantity,\n    };\n\n    return newArr;\n  });\n\n  ///////////////////\n\n  const stripe = useStripe();\n  const elements = useElements();\n  const [succeeded, setSucceeded] = useState(false);\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState(\"\");\n  const [disabled, setDisabled] = useState(true);\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const [mongoWaiter, setmongoWaiter] = useState(null);\n\n  useEffect(() => {\n    window\n      .fetch(\n        \"https://lit-thicket-99427.herokuapp.com/api/payment/create-payment-intent\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            items: sendToStrapiProducts,\n            userinfo: state.user.adress,\n            cart: state.cart,\n            typeUser: state.user,\n          }),\n        }\n      )\n      .then((res) => {\n        return res.json();\n      })\n      .then((data) => {\n        // const waiter = { ...data.cartItems };\n        const waiter = {\n          ...JSON.parse(data.metadata.cartProducts),\n          ...JSON.parse(data.metadata.typeUser),\n        };\n        setmongoWaiter({ ...waiter }); //////////\n        setClientSecret(data.clientSecret);\n      });\n  }, [state.cart, state.user.adress, state.user]);\n\n  const orderstoMongo = (param) => {\n    let array = [];\n    param.cartItems.map((el) => {\n      return array.push(el.mongoProductID);\n    });\n    // const user = param.typeUser.id;\n\n    const orders = {\n      cart: param.cartItems,\n      cartMongo: array,\n      adress: {\n        city: param.address.city,\n        street: param.address.line1,\n        postcode: param.address.postal_code,\n      },\n      date: param.dateofsucc,\n      clientname: param.name,\n      email: param.receipt_email,\n      phone: param.phone,\n      orderMessage: param.orderStatus.message,\n      orderLocation: param.orderStatus.location,\n      trackingNumber: param.tracking_number,\n      amount: param.amount,\n      // metadata: param.metadata.cartProducts,\n    };\n\n    const headers = {\n      \"Content-Type\": \"application/json\",\n      auth_token: `${localStorage.getItem(\"UserToken\")}`,\n    };\n    fetch(\"https://lit-thicket-99427.herokuapp.com/api/payment/orderstomongo\", {\n      method: \"POST\",\n      headers: headers,\n      body: JSON.stringify({ orders }),\n    })\n      .then((res) => {\n        return res.json();\n      })\n      .then((data) => {\n        history.push({\n          pathname: \"/finishedpaid\",\n\n          state: { detail: param },\n        });\n      });\n  };\n\n  const handleSubmit = async (ev) => {\n    ev.preventDefault();\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement),\n      },\n    });\n\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      const objtoMongoOders = {\n        ...mongoWaiter,\n        ...payload.paymentIntent.shipping,\n        dateofsucc: payload.paymentIntent.created,\n        receipt_email: payload.paymentIntent.receipt_email,\n        amount: payload.paymentIntent.amount,\n        orderStatus: { message: \"Processing\", location: \"Hakunila R-Kiosk\" },\n      }; ///////////This goes to mongo If succes\n\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n      orderstoMongo(objtoMongoOders);\n\n      // history.push({\n      //   pathname: \"/finishedpaid\",\n\n      //   state: { detail: objtoMongoOders },\n      // });\n    }\n  };\n  const handleChange = async (event) => {\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : \"\");\n  };\n  const cardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: \"Arial, sans-serif\",\n        fontSmoothing: \"antialiased\",\n\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\",\n        },\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\",\n      },\n    },\n  };\n\n  return (\n    <div>\n      <h1>Payment</h1>\n\n      <form id=\"payment-form\" onSubmit={handleSubmit} className=\"Stripeform\">\n        <CardElement\n          className=\"Stripeinput \"\n          id=\"card-element\"\n          options={cardStyle}\n          onChange={handleChange}\n          name\n        />\n        <button\n          disabled={processing || disabled || succeeded}\n          id=\"submit\"\n          className={succeeded ? \"StripebuttonGreen\" : \"Stripebutton\"}\n        >\n          <span id=\"button-text\">\n            {processing ? (\n              <div className=\"spinner\" id=\"spinner\"></div>\n            ) : (\n              `${succeeded ? \"Paid\" : \"Pay\"}`\n            )}\n          </span>\n        </button>\n\n        {error && (\n          <div className=\"card-error\" role=\"alert\">\n            {error}\n          </div>\n        )}\n\n        {succeeded && <p>Succsesfully paid !</p>}\n      </form>\n      <div style={{ margin: \"5px\", textAlign: \"center\" }}>\n        This is Stripe Payment service\n      </div>\n    </div>\n  );\n};\n\nexport default Stripe;\n"]},"metadata":{},"sourceType":"module"}